def play_video(video_path):
    """
    Function to play a video (multimedia)
    :param video_path:
    :return:
    """
    try:
        logging.info(f'[Step 2] - playing video content of {video_path} to verify hang or video flicker')
        if os.name == 'nt':  # Windows
            player = "C:\Program Files\VideoLAN\VLC\vlc.exe"
            if os.path.exists(player):
                 subprocess.Popen([player, video_path])
            else:
                os.startfile(video_path)  # Default player
        else:  # Unix/Linux/Mac
             subprocess.Popen(['xdg-open', video_path])
    except Exception as e:
        logging.error(f'unable to play video: {e}')

def main():
    resultlog = r'.\Logs\ResultLogs.txt'
     #video_path = 'chimei_demo_4k_h264.mp4'
    live_kernel_path = r'C:\Windows\LiveKernelReports\WATCHDOG'
    live_kernel_folder = r'C:\Windows\LiveKernelReports'

    setup_log(resultlog)
    dest_file = os.getcwd()
    copy_files('C:\Program Files\AMD\AMDlogAnalyzer',dest_file)

    create_live_kernel_file(live_kernel_folder)
    clear_dumps(live_kernel_path)

    #Setting TDRLevel to 3, to ensure dump will be generated through powershell script

    #Step 1 : Injecting error to system through batch file
    logging.info(f'[Step 1] - Error injection using errorInject.exe')
    run_batfile('Error_injection.bat')

    #Step 2 : Playing multimedia clip to verify hang or flicker occurred
    play_video(video_path)
    time.sleep(25)
    close_application('vlc.exe')
    
    #Checking for dumps generated in live_Kernel path
    dumps_check = check_live_kernel_logs(live_kernel_path)

    if dumps_check:
        #Fetching latest dump file to validate result
        latest_liveReport_dump = get_latest_dump(live_kernel_path)

        #Step 3 : Parsing dumps generated in AmdLogAnalyzer
        Triggering_latest_OCR_dump(latest_liveReport_dump)
        time.sleep(2)

        #Step 4 : Validating result by checkin for keyword in result generated by AMDLogAnalyser
        result = verify_dumps_event(r".\exports\export.json")
        logging.info(f'MMD Event ID  : {result}')

        clear_dumps(live_kernel_path)
    else:
        logging.error(f'Test Fail as dumps not found..')

    run_batfile('Error_injection_Disable.bat')
    time.sleep(2)

    convert_log_to_ini(resultlog, 'result.ini')
